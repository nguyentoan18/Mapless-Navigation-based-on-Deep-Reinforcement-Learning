<%
  # ServiceSim world generator
  #
  # Command line options (usage erb [opt]=[arg]):
  # s: seed for randomization
  # f: true to generate unpopulated world (floorplan only)
  # d: true to generate debug visuals
  # urdf_launch: File name for spawn urdf launch file to be generated on same
  #              directory as world file.

  ###############################################
  #                                             #
  #           COMMAND LINE ARGUMENTS            #
  #                                             #
  ###############################################

  vars = ARGV.take_while {|arg| arg[/^\w+=/]}
  ARGV.slice!(0, vars.size)
  vars.each do |var|
    k, v = var.split('=', 2)
    TOPLEVEL_BINDING.eval %Q(#{k} = "#{v}")
  end

  # Seed
  seed = rand(0..10000000)
  if (defined? s)
    seed = s.to_i
  end
  srand(seed)

  # Floorplan only?
  $floorplan = false
  if (defined? f)
    $floorplan = f.to_s == "true"
  end

  # Debug
  $debug = false
  if (defined? d)
    $debug = d.to_s == "true"
  end

  # URDF
  $urdf_launch = ''
  if (defined? urdf_launch)
    $urdf_launch = urdf_launch.to_s()
  end

  ###############################################
  #                                             #
  #              YAML CONFIGURATION             #
  #                                             #
  ###############################################

  require 'yaml'

  # Relative path from where the script is being run to the script's directory
  DIR = File.dirname(__FILE__)

  config = YAML.load_file(DIR + '/config.yaml')

  ###############################################
  #                                             #
  #            TRANSFORMATION MATRIX            #
  #                                             #
  ###############################################

  require 'matrix'

  # Helper function to create a 2D transform matrix
  def TMatrix(_x, _y, _yaw)
    return Matrix.rows([
             [Math::cos(_yaw), -Math::sin(_yaw), _x],
             [Math::sin(_yaw),  Math::cos(_yaw), _y],
             [0, 0, 1]
           ])
  end

  ###############################################
  #                                             #
  #               INITIALIZATION                #
  #                                             #
  ###############################################

  # Count to ensure unique names
  $count = 0

  # PI for short
  $pi = Math::PI

  # "office unit" - the width of wall panels
  $o = 1.5

  # "gap unit" - the width of gaps between rooms
  $g = 0.1

  # Total office size
  total_x = $o * 33
  total_y = $o * 15

  ###############################################
  #                                             #
  #           IMPORT OTHER ERB FILES            #
  #                                             #
  ###############################################

  # Helper function to import another erb file
  def fromFile filename
    return ERB.new(File.read(filename), nil, nil, '_sub01').result(binding)
  end

  ###############################################
  #                                             #
  #                     ROOMS                   #
  #                                             #
  ###############################################


  # Get an angle for the door, it's 0.0 for a closed door
  # open (number) 0 for closed, 1 for open and -1 for random
  def doorAngle(open = -1)
    if open == -1
      open = [true, false].sample()
    end

    if not open
      return 0.0
    else
      return rand($pi*0.8..$pi)
    end
  end

  # Dictionary with all room types
  room_types =
  {
    :bathroom => {:type => 'bathroom', :floor => 'tile', :size => [0, 1, -1, 0]},
    :refreshment_area => {:type => 'refreshment_area', :floor => 'tile', :size => [-3, 3, -4, 0]},
    :meeting_room_large => {:type => 'meeting_room_large', :floor => 'carpet', :size => [-1, 4, -3, 0]},
    :meeting_room_small => {:type => 'meeting_room_small', :floor => 'carpet', :size => [-1, 2, -2, 0]},
    :office_small => {:type => 'office_small', :floor => 'carpet', :size => [-1, 1, -1, 0]},
    :office_large => {:type => 'office_large', :floor => 'carpet', :size => [-1, 2, -2, 0]},
  }

  # Array with objects that fit well on corners
  $corner_objs =
  [
    'hangout_chair',
    'mini_fridge',
    'wastebasket',
    'office_box',
  ]

  # Dictionary with all rooms to be inserted
  rooms =
  [
    # Public area
    {:name => 'PublicBathroomA',
     :type => room_types[:bathroom],
     :pose => [  6*$o + 0*$g,   2*$o + 0*$g, 0, 0, 0, 0],
     :door => doorAngle()},
    {:name => 'PublicBathroomB',
     :type => room_types[:bathroom],
     :pose => [  8*$o + 1*$g,   2*$o + 0*$g, 0, 0, 0, 0],
     :door => doorAngle()},
    {:name => 'PublicCafe',
     :type => room_types[:refreshment_area],
     :pose => [  9*$o + 2*$g,   4*$o + 0*$g, 0, 0, 0, $pi * 0.5],
     :door => doorAngle(1)},
    {:name => 'PublicMeetingRoomA',
     :type => room_types[:meeting_room_large],
     :pose => [ 12*$o + 0*$g,  11*$o + 0*$g, 0, 0, 0, $pi],
     :door => doorAngle(1)},
    {:name => 'PublicMeetingRoomB',
     :type => room_types[:meeting_room_small],
     :pose => [  3*$o + 0*$g,   5*$o + 0*$g, 0, 0, 0, -$pi * 0.5],
     :door => doorAngle()},
    {:name => 'PublicMeetingRoomC',
     :type => room_types[:meeting_room_small],
     :pose => [  3*$o + 0*$g,   9*$o + 1*$g, 0, 0, 0, -$pi * 0.5],
     :door => doorAngle()},
    {:name => 'PublicMeetingRoomD',
     :type => room_types[:office_small],
     :pose => [  6*$o - 1*$g,  13*$o + 0*$g, 0, 0, 0, $pi],
     :door => doorAngle()},
    {:name => 'PublicMeetingRoomE',
     :type => room_types[:office_small],
     :pose => [  3*$o - 2*$g,  13*$o + 0*$g, 0, 0, 0, $pi],
     :door => doorAngle()},
    # Employee-only area
    {:name => 'PrivateMeetingRoomA',
     :type => room_types[:meeting_room_small],
     :pose => [ -3*$o - 1*$g,   5*$o + 0*$g, 0, 0, 0, $pi * 0.5],
     :door => doorAngle()},
    {:name => 'PrivateMeetingRoomB',
     :type => room_types[:meeting_room_small],
     :pose => [ -3*$o - 1*$g,   9*$o + 1*$g, 0, 0, 0, $pi * 0.5],
     :door => doorAngle()},
    {:name => 'PrivateBathroomA',
     :type => room_types[:bathroom],
     :pose => [ -3*$o + 0*$g,  13*$o + 0*$g, 0, 0, 0, $pi],
     :door => doorAngle()},
    {:name => 'PrivateBathroomB',
     :type => room_types[:bathroom],
     :pose => [ -5*$o - 1*$g,  13*$o + 0*$g, 0, 0, 0, $pi],
     :door => doorAngle()},
    {:name => 'PrivateOfficeA',
     :type => room_types[:office_small],
     :pose => [ -8*$o - 2*$g,  13*$o + 0*$g, 0, 0, 0, $pi],
     :door => doorAngle()},
    {:name => 'PrivateOfficeB',
     :type => room_types[:office_small],
     :pose => [-11*$o - 3*$g,  13*$o + 0*$g, 0, 0, 0, $pi],
     :door => doorAngle()},
    {:name => 'PrivateOfficeC',
     :type => room_types[:office_small],
     :pose => [-14*$o - 4*$g,  13*$o + 0*$g, 0, 0, 0, $pi],
     :door => doorAngle()},
    {:name => 'PrivateOfficeD',
     :type => room_types[:office_large],
     :pose => [-15*$o - 5*$g,  12*$o + 0*$g, 0, 0, 0, -$pi * 0.5],
     :door => doorAngle(1)},
    {:name => 'PrivateMeetingRoomC',
     :type => room_types[:meeting_room_small],
     :pose => [ -8*$o + 0*$g,   3*$o + 0*$g, 0, 0, 0, 0],
     :door => doorAngle()},
    {:name => 'PrivateMeetingRoomD',
     :type => room_types[:meeting_room_small],
     :pose => [-12*$o - 1*$g,   3*$o + 0*$g, 0, 0, 0, 0],
     :door => doorAngle()},
    {:name => 'PrivateMeetingRoomE',
     :type => room_types[:meeting_room_small],
     :pose => [-16*$o - 2*$g,   3*$o + 0*$g, 0, 0, 0, 0],
     :door => doorAngle()},
  ]

  # Open doors for rooms explicitly targeted on the config file
  if config and config.key?('targets')

    target_rooms = []

    if config['targets'].key?('robot_start')
      target_rooms.push(config['targets']['robot_start'])
    end
    if config['targets'].key?('pick_up')
      target_rooms.push(config['targets']['pick_up'])
    end
    if config['targets'].key?('drop_off')
      target_rooms.push(config['targets']['drop_off'])
    end

    for room in rooms
      if target_rooms.include? room[:name]
        room[:door] = doorAngle(1)
      end
    end
  end

  # Array is filled as rooms are created
  $target_areas = []

  ###############################################
  #                                             #
  #                    ACTORS                   #
  #                                             #
  ###############################################

  # Prefix for all human names (guest and non-guest)
  $human_name = 'human'

  # Skin files under model://actor/meshes
  skins =
  [
    "SKIN_man_blue_shirt.dae",
    "SKIN_man_green_shirt.dae",
    "SKIN_man_red_shirt.dae"
  ]

  # Trajectory animation files under model://actor/meshes
  animations_trajectory =
  [
    "ANIMATION_walking.dae",
    "ANIMATION_running.dae"
  ]
  # Idling animation files under model://actor/meshes
  animations_idle_standing =
  [
    "ANIMATION_standing.dae",
    "ANIMATION_talking_a.dae",
    "ANIMATION_talking_b.dae"
  ]

  animations_idle_sitting =
  [
    "ANIMATION_sitting.dae",
  ]

  # Trajectories
  trajectories =
  [
    "trajectory_private_a.erb",
    "trajectory_private_b.erb",
    "trajectory_private_c.erb",
    "trajectory_private_d.erb",
    "trajectory_private_e.erb",
    "trajectory_private_f.erb",
    "trajectory_public_a.erb",
    "trajectory_public_b.erb",
    "trajectory_middle.erb",
    "trajectory_public_a.erb",
    "trajectory_public_b.erb",
    "trajectory_middle.erb"
  ]

  ###############################################
  #                                             #
  #                   GUEST                     #
  #                                             #
  ###############################################


  if config and config.key?('guest') and config['guest'].key?('skin')
    guest_skin = config['guest']['skin']
  else
    guest_skin = skins.sample
  end
  skins.delete(guest_skin)

  $guest_name = $human_name + '_' + rand(10000..99999).to_s()
  guest_anim = animations_trajectory[0]
  drift_times = []

  # Generate random drift times
  minInterval = 5
  maxInterval = 300
  time = 0
  drift_count = 30

  if config and config.key?('drift')

    d = config['drift']

    if d.key?('min_interval')
      minInterval = d['min_interval']
    end

    if d.key?('max_interval')
      maxInterval = d['max_interval']
    end

    if d.key?('start_time')
      time = d['start_time']
    end

    if d.key?('count')
      drift_count = d['count']
    end

  end

  (1..drift_count).each do
    time += rand(minInterval..maxInterval)
    drift_times.push(time)
  end

  ###############################################
  #                                             #
  #                NON-GUEST HUMANS             #
  #                                             #
  ###############################################


  # List of idle actors to be inserted
  # Using static humans instead of idle actors for performance
  actors_idle =
  [
    # Example randomizing skin and animation
    # {:skin => skins.sample, :anim => animations_idle_standing.sample, :config_file => 'idle_near_entrance.erb'},
    # Example using skin and animation from config
    # {:config_file => 'idle_near_fridge.erb'},
    # {:config_file => 'idle_sitting_couch.erb'},
    # {:config_file => 'idle_back.erb'}
  ]

  # List of trajectory actors to be inserted
  actors_trajectory = []
  $traj_start_poses = []

  # Total number of trajectory actors
  traj_actor_count = 10
  if config and config.key?('humans')

    if config['humans'].key?('walking_count')
      traj_actor_count = config['humans']['walking_count']
    end
  end

  for i in (1..traj_actor_count)

    actors_trajectory.push(
    {
      :skin => skins.sample,
      :velocity => rand(0.9..1.2),
      :config_file => trajectories.sample,
      :offset => rand(0..20)
    })
  end

  ###############################################
  #                                             #
  #                   ROBOT                     #
  #                                             #
  ###############################################

  $robot_name = 'servicebot'
  if config and config.key?('robot')
    if config['robot'].key?('name')
      $robot_name = config['robot']['name']
    end
  end
%>
<?xml version="1.0" ?>
<!--
  Generated from service.world.erb
  Seed: <%= seed %>
  Floorplan: <%= $floorplan %>
  Debug: <%= $debug %>
  URDF launch file: <%= $urdf_launch %>
  Config: <%= config %>
-->
<sdf version="1.6">
  <world name="default">

<%
  if not $floorplan
%>
    <physics type="ode">
      <real_time_update_rate>500.0</real_time_update_rate>
      <max_step_size>0.002</max_step_size>
      <real_time_factor>1</real_time_factor>
      <ode>
        <solver>
          <type>quick</type>
          <iters>300</iters>
          <precon_iters>0</precon_iters>
          <sor>1.400000</sor>
          <use_dynamic_moi_rescaling>1</use_dynamic_moi_rescaling>
        </solver>
        <constraints>
          <cfm>0.000000</cfm>
          <erp>0.800000</erp>
          <contact_max_correcting_vel>2000.000000</contact_max_correcting_vel>
          <contact_surface_layer>0.01000</contact_surface_layer>
        </constraints>
      </ode>
    </physics>
<%
  end # if not $floorplan
%>

    <!-- Scene -->
    <scene>
      <ambient>0.8 0.8 0.8 1.0</ambient>
      <background>0.66 0.77 0.84 1.0</background>
      <grid>0</grid>
      <origin_visual>0</origin_visual>
    </scene>

    <!-- Light just so some objects are shaded -->
    <light name='directional_light' type='directional'>
      <pose>0.0 0.0 -100.0 0 0 0</pose>
      <diffuse>0.5 0.5 0.5 1</diffuse>
      <specular>0.1 0.1 0.1 1</specular>
      <direction>0.1 0.1 -0.9</direction>
      <attenuation>
        <range>20</range>
        <constant>0.5</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <cast_shadows>0</cast_shadows>
    </light>

    <!-- Ceiling -->
    <%
      x_offset = total_x * -0.06
      y_offset = total_y * 0.5
    %>
    <model name="ceiling">
      <pose>
        <%= x_offset %>
        <%= y_offset %>
        <%= 2 * $o %>
        0
        <%= Math::PI %>
        0
      </pose>

      <static>true</static>
      <link name="link">
        <visual name="visual">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size><%= total_x %> <%= total_y %></size>
            </plane>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/</uri>
              <uri>file://media/materials/textures/</uri>
              <name>ServiceSim/Ceiling</name>
            </script>
          </material>
        </visual>
      </link>

    </model>

    <!-- Floor -->
    <% ground_name = 'floor' %>
    <model name="<%= ground_name %>">
      <pose>
        <%= x_offset %>
        <%= y_offset %>
        <%= -0.001 %>
        0
        0
        0
      </pose>

      <static>true</static>
      <link name="link">
        <visual name="visual">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size><%= total_x %> <%= total_y %></size>
            </plane>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/</uri>
              <uri>file://media/materials/textures/</uri>
              <name>ServiceSim/Hallway</name>
            </script>
          </material>
        </visual>

        <collision name="collision">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size><%= total_x %> <%= total_y %></size>
            </plane>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>1</mu>
                <mu2>1</mu2>
              </ode>
            </friction>
          </surface>
        </collision>

      </link>

    </model>

    <!-- Extra walls -->
    <%= fromFile(DIR + "/walls.erb") %>

    <!-- Rooms -->
    <%
      for room in rooms
        $room_name = room[:name]
        $room_type = room[:type][:type]
        $room_floor = room[:type][:floor]
        $room_size = room[:type][:size]
        $room_pose = room[:pose]
        $door_angle = room[:door]
    %>
      <%= fromFile(DIR + "/room.erb") %>
    <% end %>

    <!-- Public cubicles -->
    <!-- Islands -->
    <%
      for y in [5, 9]
        $count += 1
        $cubicle_name = 'PublicCubicle_' + $count.to_s()
        $pose =
        [
          6 * $o,
          y * $o,
          0,
          0,
          0,
          0,
        ]
    %>
      <%= fromFile(DIR + "/cubicle_island.erb") %>
    <%
      end
    %>

    <!-- Corners -->
    <%
      s = 9.0 * $o + 2.0 * $g
      e = 13.0 * $o
      for x in (s..e).step(1.9)
        $count += 1
        $cubicle_name = 'PublicCubicle_' + $count.to_s()
        $targetable = true
        $pose =
        [
          x - 1 * $g,
          7 * $o + $g,
          0,
          0,
          0,
          $pi,
        ]
    %>
      <%= fromFile(DIR + "/cubicle_corner.erb") %>
    <%
      end
    %>

    <!-- Private cubicles -->
    <%
      for x in [-14, -8]
        for y in [5, 8, 11]
          $count += 1
          $cubicle_name = 'PrivateCubicle_' + $count.to_s()
          $cubicle_size = x == -14 ? 4 : 3
          $cubicle_pose =
          [
            x * $o,
            y * $o,
            0.0,
            0.0,
            0.0,
            0.0,
          ]
    %>
    <%= fromFile(DIR + "/cubicles.erb") %>
      <% end %>
    <% end %>

<%
  if not $floorplan
%>
    <!-- Private cafe -->
    <%= fromFile(DIR + "/private_cafe.erb") %>

    <!-- Back entrance -->
    <%= fromFile(DIR + "/back_entrance.erb") %>

    <!-- Front entrance -->
    <%= fromFile(DIR + "/front_entrance.erb") %>

    <!-- Trajectory actors -->
    <%
      for actor in actors_trajectory

        # unique name
        $count = $count + 1
        $actor_name = $human_name + '_' + rand(10000..99999).to_s()

        $enable_collisions = true

        # skin
        $actor_skin = nil
        if actor.has_key? :skin
          $actor_skin = actor[:skin]
        end

        # animation
        $actor_anim = nil
        if actor.has_key? :anim
          $actor_anim = actor[:anim]
        end

        # velocity
        $actor_velocity = nil
        if actor.has_key? :velocity
          $actor_velocity = actor[:velocity]
        end

        # trajectory waypoints
        $actor_trajectory = nil
        if actor.has_key? :trajectory
          $actor_trajectory = actor[:trajectory]
        end

        # trajectory offset
        $traj_offset = nil
        if actor.has_key? :offset
          $traj_offset = actor[:offset]
        end

        # Set undefined values from the config file if one was given
        if actor.has_key? :config_file
          fromFile(DIR + "/" + actor[:config_file])
        end
    %>
      <%= fromFile(DIR + "/" + "actor_trajectory.erb") %>
    <% end %>

    <!-- Idling actors -->
    <%
      for actor in actors_idle

        # unique name
        $count = $count + 1
        $actor_name = $human_name + '_' + rand(10000..99999).to_s()

        # skin
        $actor_skin = nil
        if actor.has_key? :skin
          $actor_skin = actor[:skin]
        end

        # animation
        $actor_anim = nil
        if actor.has_key? :anim
          $actor_anim = actor[:anim]
        end

        # idling pose
        $actor_pose = nil
        if actor.has_key? :pose
          $actor_pose = actor[:pose]
        end

        # Set undefined values from the config file if one was given
        if actor.has_key? :config_file
          fromFile(DIR + "/" + actor[:config_file])
        end
    %>
      <%= fromFile(DIR + "/actor_idle.erb") %>
    <% end %>

    <%
      # Idling static humans
      $idle_human_count = 10
      if config and config.key?('humans')

        if config['humans'].key?('idling_count')
          $idle_human_count = config['humans']['idling_count']
        end
      end
    %>
    <%= fromFile(DIR + "/idling_humans.erb") %>

<%
  ###############################################
  #                                             #
  #               CHECKPOINTS                   #
  #                                             #
  ###############################################

  # Add pivots to target areas which don't have it yet
  padding = 1.0

  for area in $target_areas
    if area.key?(:pivot)
      next
    end

    min_x = area[:min][0]
    max_x = area[:max][0]

    if (max_x - min_x) > padding * 2.0
      x = rand((min_x+padding)..(max_x-padding))
    else
      x = min_x + (max_x - min_x) * 0.5
    end

    min_y = area[:min][1]
    max_y = area[:max][1]

    if (max_y - min_y) > padding * 2.0
      y = rand((min_y+padding)..(max_y-padding))
    else
      y = min_y + (max_y - min_y) * 0.5
    end

    area[:pivot] = [x, y, 0.0]
  end

  # Pick-up (guest's start point)
  if config and config.key?('targets') and config['targets'].key?('pick_up')
    for area in $target_areas
      if area[:name] == config['targets']['pick_up']
        location = area
        break
      end
    end
  else
    location = $drop_areas.sample()
  end

  size_x = location[:max][0] - location[:min][0]
  size_y = location[:max][1] - location[:min][1]

  center_x = location[:min][0] + size_x * 0.5
  center_y = location[:min][1] + size_y * 0.5

  $pick_up_location  =
  {
    :name => location[:name],
    :pose => [center_x, center_y, 0, 0, 0, 0],
    :size => [size_x, size_y, 10],
    :pivot => location[:pivot]
  }

  # Drop-off (guest's end point)
  location = {}
  if config and config.key?('targets') and config['targets'].key?('drop_off')
    for area in $target_areas
      if area[:name] == config['targets']['drop_off']
        location = area
        break
      end
    end
  else
    location = $pick_up_location
    while location[:name] == $pick_up_location[:name]
      location = $drop_areas.sample()
    end
  end

  size_x = location[:max][0] - location[:min][0]
  size_y = location[:max][1] - location[:min][1]

  center_x = location[:min][0] + size_x * 0.5
  center_y = location[:min][1] + size_y * 0.5

  $drop_off_location =
  {
    :name => location[:name],
    :pose => [center_x, center_y, 0, 0, 0, 0],
    :size => [size_x, size_y, 10]
  }

  # Start (robot's start/end point)
  location = {}
  if config and config.key?('targets') and config['targets'].key?('robot_start')
    for area in $target_areas
      if area[:name] == config['targets']['robot_start']
        location = area
        break
      end
    end
  else
    location = $pick_up_location
    while location[:name] == $pick_up_location[:name] or
          location[:name] == $drop_off_location[:name]
      location = $drop_areas.sample()
    end
  end

  size_x = location[:max][0] - location[:min][0]
  size_y = location[:max][1] - location[:min][1]

  center_x = location[:min][0] + size_x * 0.5
  center_y = location[:min][1] + size_y * 0.5

  robot_start_yaw = rand(-$pi..$pi)
  if config and config.key?('targets')
    if config['targets'].key?('robot_start_yaw')
      robot_start_yaw = config['targets']['robot_start_yaw']
    end
  end

  $start_location =
  {
    :name => location[:name],
    :pose => [center_x, center_y, 0, 0, 0, 0],
    :size => [size_x, size_y, 10],
    :pivot =>
    [
      location[:pivot][0],
      location[:pivot][1],
      0.75,
      0.0,
      0.0,
      robot_start_yaw
    ]
  }
%>

<%
  ###############################################
  #                                             #
  #               SCORING                       #
  #                                             #
  ###############################################

  # Default penalty and scoring weights:
  # Human contact penalty
  weight_human_contact = 30000

  # Object contact penalty
  weight_object_contact = 10000

  # Human approximation penalty
  weight_human_approximation = 1

  # Object approximation penalty
  weight_object_approximation = 0.25

  # Time for robot to reach pickup location
  weight_pickup_location = 1

  # Time for robot to pickup guest
  weight_pickup_guest = 1

  # Time to drop off guest
  weight_drop_off_guest = 1

  # Time to return to the start
  weight_return_start = 1

  # Failed pickup attempts
  weight_failed_pickup = 30

  # Failed drop_off attempts
  weight_failed_drop_off = 30

  # Robot has gone too fast
  weight_too_fast = 20

  if config and config.key?('scoring')

    s = config['scoring']

    if s.key?('weight_human_contact')
      weight_human_contact = s['weight_human_contact']
    end

    if s.key?('weight_object_contact')
      weight_object_contact = s['weight_object_contact']
    end

    if s.key?('weight_human_approximation')
      weight_human_approximation = s['weight_human_approximation']
    end

    if s.key?('weight_object_approximation')
      weight_object_approximation = s['weight_object_approximation']
    end

    if s.key?('weight_pickup_location')
      weight_pickup_location = s['weight_pickup_location']
    end

    if s.key?('weight_pickup_guest')
      weight_pickup_guest = s['weight_pickup_guest']
    end

    if s.key?('weight_drop_off_guest')
      weight_drop_off_guest  = s['weight_drop_off_guest']
    end

    if s.key?('weight_return_start')
      weight_return_start = s['weight_return_start']
    end

    if s.key?('weight_failed_pickup')
      weight_failed_pickup = s['weight_failed_pickup']
    end

    if s.key?('weight_failed_drop_off')
      weight_failed_drop_off = s['weight_failed_drop_off']
    end

    if s.key?('weight_too_fast')
      weight_too_fast = s['weight_too_fast']
    end

  end
%>
    <!-- Competition plugin -->
    <plugin name="competition" filename="libCompetitionPlugin.so">

      <sor_lcp_tolerance>0.1</sor_lcp_tolerance>

      <pick_up_location>
        <%= $pick_up_location[:name] %>
      </pick_up_location>

      <drop_off_location>
        <%= $drop_off_location[:name] %>
      </drop_off_location>

      <robot_start_pose>
        <%= $start_location[:pivot][0] %>
        <%= $start_location[:pivot][1] %>
        <%= $start_location[:pivot][2] %>
        <%= $start_location[:pivot][3] %>
        <%= $start_location[:pivot][4] %>
        <%= $start_location[:pivot][5] %>
      </robot_start_pose>

      <guest_name><%= $guest_name %></guest_name>
      <robot_name><%= $robot_name %></robot_name>
      <ground_name><%= ground_name %></ground_name>
      <human_name><%= $human_name %></human_name>

      <weight>
        <!-- Contact and approximation weights are multiplied by contact depth -->

        <!-- Collision is usually very brief and millimiters deep, so we compensate with high weights -->
        <human_contact><%= weight_human_contact %></human_contact>
        <obj_contact><%= weight_object_contact %></obj_contact>

        <!-- Approximation usually lasts longer and may get very deep, so we compensate with low weights -->
        <human_approximation><%= weight_human_approximation %></human_approximation>
        <obj_approximation><%= weight_object_approximation %></obj_approximation>

      </weight>

      <go_to_pick_up>
        <name>Go to pick-up location</name>
        <weight>
          <time><%= weight_pickup_location %></time>
        </weight>
        <!-- for contain plugin -->
        <namespace>/servicesim/go_to_pick_up</namespace>
      </go_to_pick_up>

      <pick_up>
        <name>Pick-up guest</name>
        <weight>
          <time><%= weight_pickup_guest %></time>
          <failed_attempt><%= weight_failed_pickup %></failed_attempt>
        </weight>
      </pick_up>

      <drop_off>
        <name>Drop-off guest</name>
        <weight>
          <time><%= weight_drop_off_guest %></time>
          <too_fast><%= weight_too_fast %></too_fast>
          <failed_attempt><%= weight_failed_drop_off %></failed_attempt>
        </weight>
        <guest_name><%= $guest_name %></guest_name>
        <!-- for contain plugin -->
        <namespace>/servicesim/drop_off</namespace>
      </drop_off>

      <return_to_start>
        <name>Return to start</name>
        <weight>
          <time><%= weight_return_start %></time>
        </weight>
        <!-- for contain plugin -->
        <namespace>/servicesim/return_to_start</namespace>
      </return_to_start>

      <%
        for target in $target_areas
      %>
        <room_info
          name="<%= target[:name] %>"
          min="<%= target[:min][0] %> <%= target[:min][1] %> <%= target[:min][2] %>"
          max="<%= target[:max][0] %> <%= target[:max][1] %> <%= target[:max][2] %>"
        />
      <% end %>

    </plugin>

    <!-- Pick-up area contain plugin -->
    <!-- Location: <%= $pick_up_location[:name] %> -->
    <plugin name="pick_up" filename="libContainPlugin.so">
      <entity><%= $robot_name %></entity>
      <namespace>servicesim/go_to_pick_up</namespace>
      <enabled>false</enabled>
      <pose>
        <%= $pick_up_location[:pose][0] %>
        <%= $pick_up_location[:pose][1] %>
        <%= $pick_up_location[:pose][2] %>
        <%= $pick_up_location[:pose][3] %>
        <%= $pick_up_location[:pose][4] %>
        <%= $pick_up_location[:pose][5] %>
      </pose>
      <geometry>
        <box>
          <size>
            <%= $pick_up_location[:size][0] %>
            <%= $pick_up_location[:size][1] %>
            <%= $pick_up_location[:size][2] %>
          </size>
        </box>
      </geometry>
    </plugin>

    <!-- Drop-off area contain plugin -->
    <!-- Location: <%= $drop_off_location[:name] %> -->
    <plugin name="drop_off" filename="libContainPlugin.so">
      <entity><%= $guest_name %></entity>
      <namespace>servicesim/drop_off</namespace>
      <enabled>false</enabled>
      <pose>
        <%= $drop_off_location[:pose][0] %>
        <%= $drop_off_location[:pose][1] %>
        <%= $drop_off_location[:pose][2] %>
        <%= $drop_off_location[:pose][3] %>
        <%= $drop_off_location[:pose][4] %>
        <%= $drop_off_location[:pose][5] %>
      </pose>
      <geometry>
        <box>
          <size>
            <%= $drop_off_location[:size][0] %>
            <%= $drop_off_location[:size][1] %>
            <%= $drop_off_location[:size][2] %>
          </size>
        </box>
      </geometry>
    </plugin>

    <!-- Start area contain plugin -->
    <!-- Location: <%= $start_location[:name] %> -->
    <plugin name="start" filename="libContainPlugin.so">
      <entity><%= $robot_name %></entity>
      <namespace>servicesim/return_to_start</namespace>
      <enabled>false</enabled>
      <pose>
        <%= $start_location[:pose][0] %>
        <%= $start_location[:pose][1] %>
        <%= $start_location[:pose][2] %>
        <%= $start_location[:pose][3] %>
        <%= $start_location[:pose][4] %>
        <%= $start_location[:pose][5] %>
      </pose>
      <geometry>
        <box>
          <size>
            <%= $start_location[:size][0] %>
            <%= $start_location[:size][1] %>
            <%= $start_location[:size][2] %>
          </size>
        </box>
      </geometry>
    </plugin>

    <%
      guest_pose =
      [
        $pick_up_location[:pivot][0],
        $pick_up_location[:pivot][1],
        1.00,
        1.54,
        0,
        rand(-$pi..$pi)
      ]
    %>

    <!-- Guest -->
    <model name="<%= $guest_name %>_collision_model">
      <pose>0 0 -100 0 0 0</pose>
      <static>true</static>
      <link name="link">
        <collision name="link">
          <pose>0 -0.18 0.05 0 <%= -$pi * 0.5 %> 0</pose>
          <geometry>
            <box>
              <size>0.44 1.62 0.60</size>
            </box>
          </geometry>
        </collision>
      </link>
    </model>
    <actor name="<%= $guest_name %>">

      <!-- Starting pose, nice for when the world is reset -->
      <pose>
        <%= guest_pose[0] %>
        <%= guest_pose[1] %>
        <%= guest_pose[2] %>
        <%= guest_pose[3] %>
        <%= guest_pose[4] %>
        <%= guest_pose[5] %>
      </pose>

      <skin>
        <filename>model://actor/meshes/<%= guest_skin %></filename>
      </skin>

      <animation name="animation">
        <filename>model://actor/meshes/<%= guest_anim %></filename>
      </animation>

      <!-- Need one waypoint to idle at -->
      <script>
        <trajectory id='0' type='animation'>
          <waypoint>
            <time>100</time>
              <pose>
                <%= guest_pose[0] %>
                <%= guest_pose[1] %>
                <%= guest_pose[2] %>
                <%= guest_pose[3] %>
                <%= guest_pose[4] %>
                <%= guest_pose[5] %>
              </pose>
          </waypoint>
        </trajectory>
      </script>

      <plugin name="trajectory" filename="libFollowActorPlugin.so">

        <namespace>servicesim</namespace>

        <ignore_obstacle>walls</ignore_obstacle>
        <ignore_obstacle>floor</ignore_obstacle>
        <ignore_obstacle><%= $robot_name %></ignore_obstacle>

        <% for time in drift_times %>
          <drift_time><%= time.to_s %></drift_time>
        <% end %>

      </plugin>

      <plugin name="attach_model" filename="libAttachModelPlugin.so">
        <link>
          <link_name><%= $guest_name %>_pose</link_name>
          <model>
            <model_name><%= $guest_name %>_collision_model</model_name>
          </model>
        </link>
      </plugin>

    </actor>

    <!-- GUI -->
    <gui fullscreen='0'>
      <camera name='user_camera'>
        <pose>
        <%= $start_location[:pivot][0] + 1.0 %>
        <%= $start_location[:pivot][1] + 1.0 %>
        <%= $start_location[:pivot][2] + 0.75 %>
        0.0
        0.6
        <%= -$pi*0.75 %>
        </pose>
      </camera>
    </gui>
<%
  end # if not $floorplan
%>

<%
  if $debug
%>
  <%= fromFile(DIR + "/debug_visuals.erb") %>
<%
  end
%>

<%
  # Launch file to spawn URDF
  if $urdf_launch != ''

    File.open($urdf_launch, "w") do |f|
      f.write(fromFile(DIR + "/spawn_urdf.launch.erb"))
    end

  end
%>

  </world>
</sdf>
