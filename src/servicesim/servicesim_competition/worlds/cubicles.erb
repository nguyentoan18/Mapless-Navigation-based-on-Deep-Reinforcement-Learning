<%
  # Cubicles template
  #
  # Generates a group of cubicles, given the row count and the start pose
  #
  # Required variables
  # * $count (number) For unique names
  # * $cubicle_name (string) Name for this group of cubicles
  # * $cubicle_size (number) row count
  # * $cubicle_pose (number[6]) Pose of starting edge
  # * $floorplan (bool) True if only showing floorplan
  # * $target_areas ([]) Dictionary with target area info

  # Unit size of a cubicle element
  cubicle_u = 0.6

  # Size of corner elements
  cubicle_corner = 0.025

  # Number of cubicle units along the X axis
  x_size = 3

  # Minimum X
  x_min = 0

  # Maximum X, in cubicle units
  x_max = x_size * $cubicle_size - 1

  # Count for unique visual names
  count = 0

  # Fill target areas in world coords
  target_width = 1.5
  n = 0
  for x in (x_min..x_max).step(x_size)

    for side in [-1, 1]

      n += 1

      min_x_world = $cubicle_pose[0] + x * cubicle_u
      max_x_world = $cubicle_pose[0] + (x + x_size) * cubicle_u
      pivot_x = min_x_world + (max_x_world - min_x_world) * rand(0.0..1.0)

      if side == -1
        min_y_world = $cubicle_pose[1] + side * (2 * cubicle_u + cubicle_corner + target_width)
        max_y_world = $cubicle_pose[1] + side * (2 * cubicle_u + cubicle_corner)

        pivot_y = min_y_world - side * target_width * 0.5
      else
        min_y_world = $cubicle_pose[1] + side * (2 * cubicle_u + cubicle_corner)
        max_y_world = $cubicle_pose[1] + side * (2 * cubicle_u + cubicle_corner + target_width)

        pivot_y = max_y_world - side * target_width * 0.5
      end

      $target_areas.push({:name => $cubicle_name + '_' + n.to_s(),
                        :min => [min_x_world, min_y_world, $cubicle_pose[2]],
                        :max => [max_x_world, max_y_world, $cubicle_pose[2]],
                        :pivot => [pivot_x, pivot_y, $cubicle_pose[2]]})
    end
  end
%>
<model name="<%= $cubicle_name %>">

  <static>true</static>

  <pose>
    <%= $cubicle_pose[0] %>
    <%= $cubicle_pose[1] %>
    <%= $cubicle_pose[2] %>
    <%= $cubicle_pose[3] %>
    <%= $cubicle_pose[4] %>
    <%= $cubicle_pose[5] %>
  </pose>

  <link name="walls">

    <!-- center wall -->
    <%
      for x in (x_min..x_max)
        count += 1
        type = 'closed'
        offset = -0.3
        pose =
        [
          x * cubicle_u + offset,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0
        ]
    %>
      <visual name="visual_<%= count %>">

        <pose>
          <%= pose[0] %>
          <%= pose[1] %>
          <%= pose[2] %>
          <%= pose[3] %>
          <%= pose[4] %>
          <%= pose[5] %>
        </pose>

        <geometry>
          <mesh>
            <uri>model://cubicle_wall/meshes/cubicle_<%= type %>.obj</uri>
            <scale>0.01 0.01 0.01</scale>
          </mesh>
        </geometry>
      </visual>
    <% end %>

    <!-- row divisions -->
    <%
      for x in (x_min..(x_max+1)).step(x_size)

        for side in [-1, 1]

          count += 1
          type = 'wall'
          offset = -0.9 * side
          pose =
          [
            x * cubicle_u,
            offset,
            0.0,
            0.0,
            0.0,
            Math::PI * 0.5 * side
          ]
    %>
      <visual name="visual_<%= count %>">

        <pose>
          <%= pose[0] %>
          <%= pose[1] %>
          <%= pose[2] %>
          <%= pose[3] %>
          <%= pose[4] %>
          <%= pose[5] %>
        </pose>

        <geometry>
          <mesh>
            <uri>model://cubicle_wall/meshes/cubicle_<%= type %>.obj</uri>
            <scale>0.01 0.01 0.01</scale>
          </mesh>
        </geometry>
      </visual>
      <% end %>
    <% end %>

    <!-- openings -->
    <%
      for x in (x_min..(x_max+1)).step(x_size)

        for side in [-1, 1]

          if side == 1 and x == x_min
            next
          elsif side == -1 and x == x_max + 1
            next
          end

          count += 1
          type = 'wall'
          offset = -0.9 * side
          yaw = side == -1 ? 0.0 : Math::PI
          pose =
          [
            x * cubicle_u + offset,
           - (2 * cubicle_u + cubicle_corner) * side,
            0.0,
            0.0,
            0.0,
            yaw
          ]
    %>
      <visual name="visual_<%= count %>">

        <pose>
          <%= pose[0] %>
          <%= pose[1] %>
          <%= pose[2] %>
          <%= pose[3] %>
          <%= pose[4] %>
          <%= pose[5] %>
        </pose>

        <geometry>
          <mesh>
            <uri>model://cubicle_wall/meshes/cubicle_<%= type %>.obj</uri>
            <scale>0.01 0.01 0.01</scale>
          </mesh>
        </geometry>
      </visual>
      <% end %>
    <% end %>

    <%
      height = 1.5
      col_size =
      [
        (x_max + 1) * cubicle_u + 2 * cubicle_corner,
        2 * (2 * cubicle_u + cubicle_corner) + 2 * cubicle_corner,
        height
      ]
    %>
    <collision name="collision">

      <pose>
        <%= col_size[0] * 0.5 - cubicle_corner %>
        0.0
        <%= height * 0.5 %>
        0.0
        0.0
        0.0
      </pose>

      <geometry>
        <box>
          <size>
            <%= col_size[0] %>
            <%= col_size[1] %>
            <%= col_size[2] %>
          </size>
        </box>
      </geometry>
    </collision>

  </link>

<%
  if not $floorplan
%>
  <!-- furniture -->
  <%
    for x in (x_min..x_max).step(x_size)

      for side in [-1, 1]

        count += 1

        x_off = 0.884
        x_off_chair = x_off + rand(-0.1..0.1)

        y_off = -0.1 * side
        y_off_chair = rand(-0.7..-0.4) * side
        y_comp = -0.15 * side

        yaw = side == -1 ? 0.0 : Math::PI
        yaw_comp = side == -1 ? Math::PI : 0.0
  %>
    <include>
      <name>desk_<%= count %></name>
      <pose>
        <%= x * cubicle_u + x_off %>
        <%= y_off %>
        0.1
        0
        0
        <%= yaw %>
      </pose>
      <uri>model://desk</uri>
    </include>

    <link name="computer_<%= count %>">
      <pose>
        <%= x * cubicle_u + x_off %>
        <%= y_comp %>
        0.78
        0
        0
        <%= yaw_comp %>
      </pose>
      <visual name="monitor">
        <geometry>
          <mesh>
            <uri>model://computer/meshes/computer_monitor.obj</uri>
            <scale>0.01 0.01 0.01</scale>
          </mesh>
        </geometry>
      </visual>

    </link>

    <%
      $name = 'chair_' + count.to_s()
      $pose =
      [
        x * cubicle_u + x_off_chair,
        y_off_chair,
        0,
        0,
        0,
        yaw + rand(-0.7..0.7),
      ]
      $collisions = false
    %>
    <%= fromFile(DIR + "/office_chair.erb") %>

    <% end %>
  <% end %>
<%
  end # if not $floorplan
%>

</model>
